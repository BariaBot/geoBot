package ru.gang.datingBot.bot;

import java.time.LocalDateTime;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.springframework.stereotype.Component;
import ru.gang.datingBot.model.MeetingRequest;
import ru.gang.datingBot.model.User;
import ru.gang.datingBot.service.MeetingService;
import ru.gang.datingBot.service.UserService;

import java.util.*;

@Component
public class DatingBot extends TelegramLongPollingBot {

  private final UserService userService;
  private final MeetingService meetingService;
  private final Map<Long, Integer> userLiveLocationDurations = new HashMap<>();
  private final Map<Long, Integer> userSearchRadius = new HashMap<>();
  private final Map<Long, Long> userPendingRequests = new HashMap<>();
  
  // Enum for tracking the state of conversation with users
  private enum UserState {
    NONE,
    WAITING_FOR_DESCRIPTION,
    WAITING_FOR_INTERESTS,
    WAITING_FOR_PHOTO
  }
  
  // Map to track the current state of each user
  private final Map<Long, UserState> userStates = new HashMap<>();

  public DatingBot(UserService userService, MeetingService meetingService) {
    this.userService = userService;
    this.meetingService = meetingService;
  }

  @Override
  public void onUpdateReceived(Update update) {
    if (update.hasMessage()) {
      var message = update.getMessage();
      Long chatId = message.getChatId();
      Integer messageId = message.getMessageId(); // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

      if (message.hasText()) {
        processTextMessage(chatId, message.getText());
      } else if (message.hasLocation()) {
        processLocationMessage(chatId, message.getLocation().getLatitude(),
            message.getLocation().getLongitude(), messageId, update); // –ü–µ—Ä–µ–¥–∞–µ–º update
      } else if (message.hasPhoto()) {
        // Handle profile photo uploads
        processPhotoMessage(chatId, message.getPhoto());
      }
    }

    if (update.hasCallbackQuery()) {
      var callbackQuery = update.getCallbackQuery();
      Long chatId = callbackQuery.getMessage().getChatId();
      String data = callbackQuery.getData();
      Integer messageId = callbackQuery.getMessage().getMessageId();

      processCallbackQuery(chatId, data, messageId);
    }
  }

  private void processTextMessage(Long chatId, String text) {
    // Check user state first to handle profile creation flow
    UserState currentState = userStates.getOrDefault(chatId, UserState.NONE);
    
    switch (currentState) {
      case WAITING_FOR_DESCRIPTION:
        userService.updateUserDescription(chatId, text);
        sendTextMessage(chatId, "‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ö–æ–±–±–∏.");
        userStates.put(chatId, UserState.WAITING_FOR_INTERESTS);
        return;
        
      case WAITING_FOR_INTERESTS:
        userService.updateUserInterests(chatId, text);
        sendTextMessage(chatId, "‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.");
        userStates.put(chatId, UserState.WAITING_FOR_PHOTO);
        return;
        
      case WAITING_FOR_PHOTO:
        sendTextMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.");
        return;
        
      default:
        // Process commands or regular messages
        break;
    }
    
    // Process commands
    switch (text) {
      case "/start":
        sendTimeSelection(chatId);
        break;
        
      case "/profile":
        showUserProfile(chatId);
        break;
        
      case "/edit_profile":
        startProfileEditing(chatId);
        break;
        
      case "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
        userService.deactivateUser(chatId);
        sendTextMessage(chatId, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏–º—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
        break;
    }
  }

  private void processLocationMessage(Long chatId, double latitude, double longitude, Integer messageId, Update update) {
    Integer duration = userLiveLocationDurations.get(chatId);
    Integer radius = userSearchRadius.get(chatId);

    if (duration != null && radius != null) {
      var from = update.getMessage().getFrom();

      String telegramUsername = (from.getUserName() != null) ? from.getUserName() : null;
      String firstName = (from.getFirstName() != null) ? from.getFirstName() : null;
      String lastName = (from.getLastName() != null) ? from.getLastName() : null;
      String phoneNumber = (update.getMessage().hasContact()) ? update.getMessage().getContact().getPhoneNumber() : null;

      userService.updateUserLocation(chatId, latitude, longitude, duration, radius, telegramUsername, firstName, lastName, phoneNumber);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é..."
      deleteMessage(chatId, messageId);

      sendTextMessage(chatId, "üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ú—ã –∏—â–µ–º –¥–ª—è –≤–∞—Å –ª—é–¥–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...");
      suggestNearbyUser(chatId, latitude, longitude, radius);
    } else {
      sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ä–∞–¥–∏—É—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.");
    }
  }
  
  /**
   * Process profile photo uploads
   */
  private void processPhotoMessage(Long chatId, List<PhotoSize> photos) {
    if (userStates.getOrDefault(chatId, UserState.NONE) == UserState.WAITING_FOR_PHOTO) {
      // Get the largest photo (best quality)
      PhotoSize largestPhoto = photos.stream()
          .max(Comparator.comparing(PhotoSize::getFileSize))
          .orElse(null);
      
      if (largestPhoto != null) {
        // Save the file ID to the user's profile
        userService.updateUserPhoto(chatId, largestPhoto.getFileId());
        
        // Reset state and show completion message
        userStates.put(chatId, UserState.NONE);
        
        int completionPercentage = userService.getProfileCompletionPercentage(chatId);
        sendTextMessage(chatId, 
            "‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n" +
            "üèÜ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ " + completionPercentage + "%\n\n" +
            "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile\n" +
            "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile");
      } else {
        sendTextMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      }
    } else if (photos != null && !photos.isEmpty()) {
      // User sent a photo without being in profile creation flow
      sendTextMessage(chatId, "üì∏ –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit_profile");
    }
  }

  private void processCallbackQuery(Long chatId, String data, Integer messageId) {
    // Profile related callbacks
    if (data.startsWith("edit_profile_")) {
      String field = data.replace("edit_profile_", "");
      processProfileEdit(chatId, field, messageId);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (data.equals("1 —á–∞—Å") || data.equals("3 —á–∞—Å–∞") || data.equals("6 —á–∞—Å–æ–≤")) {
      int duration = Integer.parseInt(data.split(" ")[0]);
      userLiveLocationDurations.put(chatId, duration);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∏—Å–∫ –ª—é–¥–µ–π —Ä—è–¥–æ–º –Ω–∞ " + duration + " —á–∞—Å–æ–≤.");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–∞–¥–∏—É—Å–∞
      sendRadiusSelection(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
    if (data.equals("1 –∫–º") || data.equals("3 –∫–º") || data.equals("5 –∫–º") || data.equals(
        "1500 –∫–º")) {
      int radius = Integer.parseInt(data.split(" ")[0]);
      userSearchRadius.put(chatId, radius);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ " + radius + " –∫–º.");

      // –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      requestLiveLocation(chatId);
    }

    if (data.startsWith("send_request_")) {
      Long receiverId = Long.parseLong(data.replace("send_request_", ""));
      Long senderId = chatId;

      System.out.println("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç " + senderId + " –∫ " + receiverId);

      meetingService.sendMeetingRequest(senderId, receiverId, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è!", LocalDateTime.now().plusHours(1));

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ
      notifyUserAboutMeetingRequest(receiverId, senderId);

      sendTextMessage(chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
    }

    if (data.startsWith("accept_request_")) {
      Long senderId = Long.parseLong(data.replace("accept_request_", ""));
      Long receiverId = chatId;

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
      List<MeetingRequest> requests = meetingService.getPendingRequestsForUser(receiverId);
      for (MeetingRequest request : requests) {
        if (request.getSender().getTelegramId().equals(senderId)) {
          meetingService.acceptMeetingRequest(request.getId());
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          sendTextMessage(senderId, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –±—ã–ª –ø—Ä–∏–Ω—è—Ç!");
          sendTextMessage(chatId, "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!");
          break;
        }
      }
    }

    if (data.startsWith("decline_request_")) {
      Long senderId = Long.parseLong(data.replace("decline_request_", ""));
      Long receiverId = chatId;

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
      List<MeetingRequest> requests = meetingService.getPendingRequestsForUser(receiverId);
      for (MeetingRequest request : requests) {
        if (request.getSender().getTelegramId().equals(senderId)) {
          meetingService.declineMeetingRequest(request.getId());
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          sendTextMessage(senderId, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.");
          sendTextMessage(chatId, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.");
          break;
        }
      }
    }
  }

  /**
   * Show the user's profile information
   */
  private void showUserProfile(Long chatId) {
    User user = userService.getUserByTelegramId(chatId);
    
    if (user == null) {
      sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.");
      return;
    }
    
    // If the user has a profile photo, send it with the profile info
    if (user.getPhotoFileId() != null && !user.getPhotoFileId().isEmpty()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(chatId.toString());
      photoMessage.setPhoto(new InputFile(user.getPhotoFileId()));
      photoMessage.setCaption(user.getProfileInfo());
      photoMessage.setParseMode("Markdown");
      
      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
        // Fallback to text-only if photo fails
        sendTextMessage(chatId, user.getProfileInfo());
      }
    } else {
      // Send text-only profile
      SendMessage message = new SendMessage();
      message.setChatId(chatId.toString());
      message.setText(user.getProfileInfo() + 
          "\nüîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.");
      message.setParseMode("Markdown");
      executeMessage(message);
    }
    
    // Show completion percentage
    int completionPercentage = user.getProfileCompletionPercentage();
    sendTextMessage(chatId, "üèÜ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ " + completionPercentage + "%");
    
    // Show edit button
    SendMessage editMessage = new SendMessage();
    editMessage.setChatId(chatId.toString());
    editMessage.setText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ?");
    
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    
    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–û–ø–∏—Å–∞–Ω–∏–µ", "edit_profile_description"));
    row1.add(createButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", "edit_profile_interests"));
    rowsInline.add(row1);
    
    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–§–æ—Ç–æ", "edit_profile_photo"));
    rowsInline.add(row2);
    
    markupInline.setKeyboard(rowsInline);
    editMessage.setReplyMarkup(markupInline);
    
    executeMessage(editMessage);
  }
  
  /**
   * Start the profile editing process
   */
  private void startProfileEditing(Long chatId) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:");
    
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    
    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–û–ø–∏—Å–∞–Ω–∏–µ", "edit_profile_description"));
    row1.add(createButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", "edit_profile_interests"));
    rowsInline.add(row1);
    
    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–§–æ—Ç–æ", "edit_profile_photo"));
    rowsInline.add(row2);
    
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    
    executeMessage(message);
  }
  
  /**
   * Process profile edit selection
   */
  private void processProfileEdit(Long chatId, String field, Integer messageId) {
    // Remove the previous message with buttons
    deleteMessage(chatId, messageId);
    
    switch (field) {
      case "description":
        sendTextMessage(chatId, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):");
        userStates.put(chatId, UserState.WAITING_FOR_DESCRIPTION);
        break;
        
      case "interests":
        sendTextMessage(chatId, "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ö–æ–±–±–∏ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):");
        userStates.put(chatId, UserState.WAITING_FOR_INTERESTS);
        break;
        
      case "photo":
        sendTextMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:");
        userStates.put(chatId, UserState.WAITING_FOR_PHOTO);
        break;
    }
  }

  private void sendTimeSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(),
        "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 —á–∞—Å", "1 —á–∞—Å"));
    rowInline.add(createButton("3 —á–∞—Å–∞", "3 —á–∞—Å–∞"));
    rowInline.add(createButton("6 —á–∞—Å–æ–≤", "6 —á–∞—Å–æ–≤"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  private void sendRadiusSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 –∫–º", "1 –∫–º"));
    rowInline.add(createButton("3 –∫–º", "3 –∫–º"));
    rowInline.add(createButton("5 –∫–º", "5 –∫–º"));
    rowInline.add(createButton("1500 –∫–º", "1500 –∫–º"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  private void requestLiveLocation(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(),
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–∞—Å –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏:");
    executeMessage(message);
  }

  private void suggestNearbyUser(Long chatId, double lat, double lon, int radius) {
    System.out.println("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä—è–¥–æ–º (lat: " + lat + ", lon: " + lon + ", radius: " + radius + " –∫–º)");

    List<User> nearbyUsers = userService.findNearbyUsers(lat, lon, radius);

    if (nearbyUsers == null || nearbyUsers.isEmpty()) {
      sendTextMessage(chatId,
          "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n" +
              "üìç –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ " + userLiveLocationDurations.getOrDefault(chatId, 0) +
              " —á–∞—Å–æ–≤. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–∫–∞–∂–µ—Ç—Å—è —Ä—è–¥–æ–º, –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º!");
      return;
    }

    System.out.println("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + nearbyUsers.size());

    for (User user : nearbyUsers) {
      System.out.println(" - " + user.getTelegramId() + " | " +
          (user.getUsername() != null ? user.getUsername() : "–±–µ–∑ username") +
          " | " + (user.getFirstName() != null ? user.getFirstName() : "") +
          " | lat: " + user.getLatitude() + " lon: " + user.getLongitude());
    }

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    User profile = nearbyUsers.get(0);

    // –ï—Å–ª–∏ username == null, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    String displayName = getDisplayName(profile);

    System.out.println("–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + profile.getTelegramId() + " | " + displayName);

    SendMessage message = new SendMessage();
    message.setChatId(chatId);
    
    // Include profile info if available
    StringBuilder profileInfo = new StringBuilder();
    profileInfo.append("‚ú® @").append(displayName).append(" —Ä—è–¥–æ–º!");
    
    if (profile.getDescription() != null && !profile.getDescription().isEmpty()) {
      profileInfo.append("\n\nüìù –û —Å–µ–±–µ: ").append(profile.getDescription());
    }
    
    if (profile.getInterests() != null && !profile.getInterests().isEmpty()) {
      profileInfo.append("\n\n‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å—ã: ").append(profile.getInterests());
    }
    
    profileInfo.append("\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å?");
    message.setText(profileInfo.toString());

    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    InlineKeyboardButton sendRequestButton = new InlineKeyboardButton();
    sendRequestButton.setText("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
    sendRequestButton.setCallbackData("send_request_" + profile.getTelegramId());

    rowInline.add(sendRequestButton);
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);

    executeMessage(message);
    
    // If the user has a photo, send it separately
    if (profile.getPhotoFileId() != null && !profile.getPhotoFileId().isEmpty()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(chatId.toString());
      photoMessage.setPhoto(new InputFile(profile.getPhotoFileId()));
      
      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
      }
    }
  }

  private void notifyUserAboutMeetingRequest(Long receiverId, Long senderId) {
    User sender = userService.getUserByTelegramId(senderId);
    String senderName = getDisplayName(sender);

    SendMessage message = new SendMessage();
    message.setChatId(receiverId.toString());
    
    // Include profile info in the request notification
    StringBuilder requestInfo = new StringBuilder();
    requestInfo.append("‚ú® ").append(senderName).append(" –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!");
    
    if (sender.getDescription() != null && !sender.getDescription().isEmpty()) {
      requestInfo.append("\n\nüìù –û —Å–µ–±–µ: ").append(sender.getDescription());
    }
    
    if (sender.getInterests() != null && !sender.getInterests().isEmpty()) {
      requestInfo.append("\n\n‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å—ã: ").append(sender.getInterests());
    }
    
    message.setText(requestInfo.toString());

    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    InlineKeyboardButton acceptButton = new InlineKeyboardButton();
    acceptButton.setText("‚úÖ –ü—Ä–∏–Ω—è—Ç—å");
    acceptButton.setCallbackData("accept_request_" + senderId);

    InlineKeyboardButton declineButton = new InlineKeyboardButton();
    declineButton.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
    declineButton.setCallbackData("decline_request_" + senderId);

    rowInline.add(acceptButton);
    rowInline.add(declineButton);
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);

    executeMessage(message);
    
    // If the sender has a photo, send it separately
    if (sender.getPhotoFileId() != null && !sender.getPhotoFileId().isEmpty()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(receiverId.toString());
      photoMessage.setPhoto(new InputFile(sender.getPhotoFileId()));
      
      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
      }
    }
  }

  private void sendTextMessage(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(text);
    executeMessage(message);
  }

  private InlineKeyboardButton createButton(String text, String callbackData) {
    InlineKeyboardButton button = new InlineKeyboardButton();
    button.setText(text);
    button.setCallbackData(callbackData);
    return button;
  }

  private void deleteMessage(Long chatId, Integer messageId) {
    try {
      execute(new DeleteMessage(chatId.toString(), messageId));
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  private void executeMessage(SendMessage message) {
    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private String getDisplayName(User user) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: username -> firstName -> "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if (user.getUsername() != null && !user.getUsername().isEmpty()) {
      return "@" + user.getUsername();
    } else if (user.getFirstName() != null && !user.getFirstName().isEmpty()) {
      String displayName = user.getFirstName();
      if (user.getLastName() != null && !user.getLastName().isEmpty()) {
        displayName += " " + user.getLastName();
      }
      return displayName;
    } else {
      return "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    }
  }

  @Override
  public String getBotUsername() {
    return "GeoGreet_bot";
  }

  @Override
  public String getBotToken() {
    return "7906499880:AAGXfaTwF3JXOsiYxIl_yvYdO696Po2DVOU";
  }
}
