package ru.gang.datingBot.bot;

import java.time.LocalDateTime;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.springframework.stereotype.Component;
import ru.gang.datingBot.model.User;
import ru.gang.datingBot.service.MeetingService;
import ru.gang.datingBot.service.UserService;

import java.util.*;

@Component
public class DatingBot extends TelegramLongPollingBot {

  private final UserService userService;
  private final MeetingService meetingService;
  private final Map<Long, Integer> userLiveLocationDurations = new HashMap<>();
  private final Map<Long, Integer> userSearchRadius = new HashMap<>();
  private final Map<Long, Long> userPendingRequests = new HashMap<>();

  public DatingBot(UserService userService, MeetingService meetingService) {
    this.userService = userService;
    this.meetingService = meetingService;
  }

  @Override
  public void onUpdateReceived(Update update) {
    if (update.hasMessage()) {
      var message = update.getMessage();
      Long chatId = message.getChatId();
      Integer messageId = message.getMessageId(); // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

      if (message.hasText()) {
        processTextMessage(chatId, message.getText());
      } else if (message.hasLocation()) {
        processLocationMessage(chatId, message.getLocation().getLatitude(),
            message.getLocation().getLongitude(), messageId, update); // –ü–µ—Ä–µ–¥–∞–µ–º update
      }
    }

    if (update.hasCallbackQuery()) {
      var callbackQuery = update.getCallbackQuery();
      Long chatId = callbackQuery.getMessage().getChatId();
      String data = callbackQuery.getData();
      Integer messageId = callbackQuery.getMessage().getMessageId();

      processCallbackQuery(chatId, data, messageId);
    }
  }



  private void processTextMessage(Long chatId, String text) {
    switch (text) {
      case "/start":
        sendTimeSelection(chatId);
        break;
      case "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
        userService.deactivateUser(chatId);
        sendTextMessage(chatId, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏–º—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
        break;
    }
  }

  private void processLocationMessage(Long chatId, double latitude, double longitude, Integer messageId, Update update) {
    Integer duration = userLiveLocationDurations.get(chatId);
    Integer radius = userSearchRadius.get(chatId);

    if (duration != null && radius != null) {
      var from = update.getMessage().getFrom();

      String telegramUsername = (from.getUserName() != null) ? from.getUserName() : null;
      String firstName = (from.getFirstName() != null) ? from.getFirstName() : null;
      String lastName = (from.getLastName() != null) ? from.getLastName() : null;
      String phoneNumber = (update.getMessage().hasContact()) ? update.getMessage().getContact().getPhoneNumber() : null;

      userService.updateUserLocation(chatId, latitude, longitude, duration, radius, telegramUsername, firstName, lastName, phoneNumber);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é..."
      deleteMessage(chatId, messageId);

      sendTextMessage(chatId, "üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ú—ã –∏—â–µ–º –¥–ª—è –≤–∞—Å –ª—é–¥–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...");
      suggestNearbyUser(chatId, latitude, longitude, radius);
    } else {
      sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ä–∞–¥–∏—É—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.");
    }
  }

  private void processCallbackQuery(Long chatId, String data, Integer messageId) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (data.equals("1 —á–∞—Å") || data.equals("3 —á–∞—Å–∞") || data.equals("6 —á–∞—Å–æ–≤")) {
      int duration = Integer.parseInt(data.split(" ")[0]);
      userLiveLocationDurations.put(chatId, duration);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∏—Å–∫ –ª—é–¥–µ–π —Ä—è–¥–æ–º –Ω–∞ " + duration + " —á–∞—Å–æ–≤.");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–∞–¥–∏—É—Å–∞
      sendRadiusSelection(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
    if (data.equals("1 –∫–º") || data.equals("3 –∫–º") || data.equals("5 –∫–º") || data.equals(
        "1500 –∫–º")) {
      int radius = Integer.parseInt(data.split(" ")[0]);
      userSearchRadius.put(chatId, radius);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ " + radius + " –∫–º.");

      // –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      requestLiveLocation(chatId);
    }

    if (data.startsWith("send_request_")) {
      Long receiverId = Long.parseLong(data.replace("send_request_", ""));
      Long senderId = chatId;

      System.out.println("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç " + senderId + " –∫ " + receiverId);

      meetingService.sendMeetingRequest(senderId, receiverId, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è!", LocalDateTime.now().plusHours(1));

      sendTextMessage(chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
    }
  }


  private void sendTimeSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(),
        "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 —á–∞—Å", "1 —á–∞—Å"));
    rowInline.add(createButton("3 —á–∞—Å–∞", "3 —á–∞—Å–∞"));
    rowInline.add(createButton("6 —á–∞—Å–æ–≤", "6 —á–∞—Å–æ–≤"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  private void sendRadiusSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 –∫–º", "1 –∫–º"));
    rowInline.add(createButton("3 –∫–º", "3 –∫–º"));
    rowInline.add(createButton("5 –∫–º", "5 –∫–º"));
    rowInline.add(createButton("1500 –∫–º", "1500 –∫–º"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  private void requestLiveLocation(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(),
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–∞—Å –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏:");
    executeMessage(message);
  }

  private void suggestNearbyUser(Long chatId, double lat, double lon, int radius) {
    System.out.println("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä—è–¥–æ–º (lat: " + lat + ", lon: " + lon + ", radius: " + radius + " –∫–º)");

    List<User> nearbyUsers = userService.findNearbyUsers(lat, lon, radius);

    if (nearbyUsers == null || nearbyUsers.isEmpty()) {
      sendTextMessage(chatId,
          "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n" +
              "üìç –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ " + userLiveLocationDurations.getOrDefault(chatId, 0) +
              " —á–∞—Å–æ–≤. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–∫–∞–∂–µ—Ç—Å—è —Ä—è–¥–æ–º, –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º!");
      return;
    }

    System.out.println("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + nearbyUsers.size());

    for (User user : nearbyUsers) {
      System.out.println(" - " + user.getTelegramId() + " | " + user.getUsername() +
          " | lat: " + user.getLatitude() + " lon: " + user.getLongitude());
    }

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    User profile = nearbyUsers.get(0);

    // –ï—Å–ª–∏ username == null, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    String displayName = (profile.getUsername() != null) ? profile.getUsername() : "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    System.out.println("–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + profile.getTelegramId() + " | " + displayName);

    SendMessage message = new SendMessage();
    message.setChatId(chatId);
    message.setText("‚ú® @" + displayName + " —Ä—è–¥–æ–º!\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å?");

    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    InlineKeyboardButton sendRequestButton = new InlineKeyboardButton();
    sendRequestButton.setText("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
    sendRequestButton.setCallbackData("send_request_" + profile.getTelegramId());

    rowInline.add(sendRequestButton);
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);

    executeMessage(message);
  }

  private void sendTextMessage(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(text);
    executeMessage(message);
  }

  private InlineKeyboardButton createButton(String text, String callbackData) {
    InlineKeyboardButton button = new InlineKeyboardButton();
    button.setText(text);
    button.setCallbackData(callbackData);
    return button;
  }

  private void deleteMessage(Long chatId, Integer messageId) {
    try {
      execute(new DeleteMessage(chatId.toString(), messageId));
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  private void executeMessage(SendMessage message) {
    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  @Override
  public String getBotUsername() {
    return "GeoGreet_bot";
  }

  @Override
  public String getBotToken() {
    return "7906499880:AAGXfaTwF3JXOsiYxIl_yvYdO696Po2DVOU";
  }
}
