package ru.gang.datingBot.bot;

import java.time.LocalDateTime;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.springframework.stereotype.Component;
import ru.gang.datingBot.model.MeetingRequest;
import ru.gang.datingBot.model.User;
import ru.gang.datingBot.service.MeetingService;
import ru.gang.datingBot.service.UserService;

import java.util.*;

@Component
public class DatingBot extends TelegramLongPollingBot {

  private final UserService userService;
  private final MeetingService meetingService;
  private final Map<Long, Integer> userLiveLocationDurations = new HashMap<>();
  private final Map<Long, Integer> userSearchRadius = new HashMap<>();
  private final Map<Long, Long> userPendingRequests = new HashMap<>();
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  private final Map<Long, List<User>> nearbyUsersCache = new HashMap<>();
  private final Map<Long, Integer> currentUserIndexCache = new HashMap<>();
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
  private final Map<Long, String> meetingRequestMessages = new HashMap<>();
  private final Map<Long, String> meetingRequestPhotos = new HashMap<>();
  private final Map<Long, Long> meetingRequestTargets = new HashMap<>();
  
  // Enum –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  private enum UserState {
    NONE,
    WAITING_FOR_DESCRIPTION,
    WAITING_FOR_INTERESTS,
    WAITING_FOR_PHOTO,
    WAITING_FOR_AGE,
    WAITING_FOR_GENDER,
    WAITING_FOR_MIN_AGE,
    WAITING_FOR_MAX_AGE,
    WAITING_FOR_GENDER_PREFERENCE,
    WAITING_FOR_MEETING_MESSAGE,
    WAITING_FOR_MEETING_PHOTO
  }
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private final Map<Long, UserState> userStates = new HashMap<>();

  public DatingBot(UserService userService, MeetingService meetingService) {
    this.userService = userService;
    this.meetingService = meetingService;
  }

  @Override
  public void onUpdateReceived(Update update) {
    if (update.hasMessage()) {
      var message = update.getMessage();
      Long chatId = message.getChatId();
      Integer messageId = message.getMessageId(); // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

      if (message.hasText()) {
        processTextMessage(chatId, message.getText());
      } else if (message.hasLocation()) {
        processLocationMessage(chatId, message.getLocation().getLatitude(),
            message.getLocation().getLongitude(), messageId, update); // –ü–µ—Ä–µ–¥–∞–µ–º update
      } else if (message.hasPhoto()) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        processPhotoMessage(chatId, message.getPhoto(), messageId);
      }
    }

    if (update.hasCallbackQuery()) {
      var callbackQuery = update.getCallbackQuery();
      Long chatId = callbackQuery.getMessage().getChatId();
      String data = callbackQuery.getData();
      Integer messageId = callbackQuery.getMessage().getMessageId();

      processCallbackQuery(chatId, data, messageId);
    }
  }

  private void processTextMessage(Long chatId, String text) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    UserState currentState = userStates.getOrDefault(chatId, UserState.NONE);
    
    switch (currentState) {
      case WAITING_FOR_DESCRIPTION:
        userService.updateUserDescription(chatId, text);
        sendTextMessage(chatId, "‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ö–æ–±–±–∏.");
        userStates.put(chatId, UserState.WAITING_FOR_INTERESTS);
        return;
        
      case WAITING_FOR_INTERESTS:
        userService.updateUserInterests(chatId, text);
        sendTextMessage(chatId, "‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.");
        userStates.put(chatId, UserState.WAITING_FOR_AGE);
        return;
        
      case WAITING_FOR_AGE:
        try {
          int age = Integer.parseInt(text.trim());
          if (age < 18 || age > 100) {
            sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç).");
            return;
          }
          userService.updateUserAge(chatId, age);
          sendGenderSelection(chatId);
          userStates.put(chatId, UserState.WAITING_FOR_GENDER);
        } catch (NumberFormatException e) {
          sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.");
        }
        return;
        
      case WAITING_FOR_MIN_AGE:
        try {
          int minAge = Integer.parseInt(text.trim());
          if (minAge < 18 || minAge > 100) {
            sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç).");
            return;
          }
          
          User user = userService.getUserByTelegramId(chatId);
          // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
          userService.updateUserSearchPreferences(chatId, minAge, user.getMaxAgePreference(), user.getGenderPreference());
          
          sendTextMessage(chatId, "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ " + minAge + " –ª–µ—Ç. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.");
          userStates.put(chatId, UserState.WAITING_FOR_MAX_AGE);
        } catch (NumberFormatException e) {
          sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.");
        }
        return;
        
      case WAITING_FOR_MAX_AGE:
        try {
          int maxAge = Integer.parseInt(text.trim());
          if (maxAge < 18 || maxAge > 100) {
            sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç).");
            return;
          }
          
          User user = userService.getUserByTelegramId(chatId);
          if (user.getMinAgePreference() != null && maxAge < user.getMinAgePreference()) {
            sendTextMessage(chatId, "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –≤–æ–∑—Ä–∞—Å—Ç—É " + user.getMinAgePreference() + " –ª–µ—Ç.");
            return;
          }
          
          // –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
          userService.updateUserSearchPreferences(chatId, user.getMinAgePreference(), maxAge, user.getGenderPreference());
          
          sendGenderPreferenceSelection(chatId);
          userStates.put(chatId, UserState.WAITING_FOR_GENDER_PREFERENCE);
        } catch (NumberFormatException e) {
          sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.");
        }
        return;
        
      case WAITING_FOR_PHOTO:
        sendTextMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.");
        return;
        
      case WAITING_FOR_MEETING_MESSAGE:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        meetingRequestMessages.put(chatId, text);
        sendTextMessage(chatId, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–ø—Ä–æ—Å—É? (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\")");
        userStates.put(chatId, UserState.WAITING_FOR_MEETING_PHOTO);
        return;
        
      case WAITING_FOR_MEETING_PHOTO:
        if (text.equalsIgnoreCase("–Ω–µ—Ç") || text.equalsIgnoreCase("no")) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–æ—Ç–æ
          Long targetUserId = meetingRequestTargets.get(chatId);
          String message = meetingRequestMessages.get(chatId);
          
          if (targetUserId != null && message != null) {
            meetingService.sendMeetingRequest(chatId, targetUserId, message, LocalDateTime.now().plusHours(1));
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ
            notifyUserAboutMeetingRequest(targetUserId, chatId);
            
            sendTextMessage(chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            meetingRequestMessages.remove(chatId);
            meetingRequestTargets.remove(chatId);
          } else {
            sendTextMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
          }
          
          userStates.put(chatId, UserState.NONE);
        } else {
          sendTextMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\", –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.");
        }
        return;
        
      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        break;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    switch (text) {
      case "/start":
        sendTimeSelection(chatId);
        break;
        
      case "/profile":
        showUserProfile(chatId);
        break;
        
      case "/edit_profile":
        startProfileEditing(chatId);
        break;
        
      case "/search_settings":
        showSearchSettings(chatId);
        break;
        
      case "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
        userService.deactivateUser(chatId);
        sendTextMessage(chatId, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏–º—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
        break;
    }
  }

  private void processLocationMessage(Long chatId, double latitude, double longitude, Integer messageId, Update update) {
    Integer duration = userLiveLocationDurations.get(chatId);
    Integer radius = userSearchRadius.get(chatId);

    if (duration != null && radius != null) {
      var from = update.getMessage().getFrom();

      String telegramUsername = (from.getUserName() != null) ? from.getUserName() : null;
      String firstName = (from.getFirstName() != null) ? from.getFirstName() : null;
      String lastName = (from.getLastName() != null) ? from.getLastName() : null;
      String phoneNumber = (update.getMessage().hasContact()) ? update.getMessage().getContact().getPhoneNumber() : null;

      userService.updateUserLocation(chatId, latitude, longitude, duration, radius, telegramUsername, firstName, lastName, phoneNumber);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é..."
      deleteMessage(chatId, messageId);

      sendTextMessage(chatId, "üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ú—ã –∏—â–µ–º –¥–ª—è –≤–∞—Å –ª—é–¥–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...");
      
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
      List<User> nearbyUsers = userService.findNearbyUsers(chatId, latitude, longitude, radius);
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      nearbyUsersCache.put(chatId, nearbyUsers);
      currentUserIndexCache.put(chatId, 0); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
      showCurrentNearbyUser(chatId);
    } else {
      sendTextMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ä–∞–¥–∏—É—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.");
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
   */
  private void processPhotoMessage(Long chatId, List<PhotoSize> photos, Integer messageId) {
    UserState currentState = userStates.getOrDefault(chatId, UserState.NONE);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    PhotoSize largestPhoto = photos.stream()
        .max(Comparator.comparing(PhotoSize::getFileSize))
        .orElse(null);
    
    if (largestPhoto == null) {
      sendTextMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    }
    
    String fileId = largestPhoto.getFileId();
    
    switch (currentState) {
      case WAITING_FOR_PHOTO:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        userService.updateUserPhoto(chatId, fileId);
        
        int completionPercentage = userService.getProfileCompletionPercentage(chatId);
        sendTextMessage(chatId, 
            "‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n" +
            "üèÜ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ " + completionPercentage + "%\n\n" +
            "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile\n" +
            "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile");
        
        userStates.put(chatId, UserState.NONE);
        break;
        
      case WAITING_FOR_MEETING_PHOTO:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        meetingRequestPhotos.put(chatId, fileId);
        
        Long targetUserId = meetingRequestTargets.get(chatId);
        String message = meetingRequestMessages.get(chatId);
        
        if (targetUserId != null && message != null) {
          meetingService.sendMeetingRequest(chatId, targetUserId, message, LocalDateTime.now().plusHours(1), fileId);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ
          notifyUserAboutMeetingRequest(targetUserId, chatId);
          
          sendTextMessage(chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
          
          // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          meetingRequestMessages.remove(chatId);
          meetingRequestPhotos.remove(chatId);
          meetingRequestTargets.remove(chatId);
        } else {
          sendTextMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
        
        userStates.put(chatId, UserState.NONE);
        break;
        
      default:
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        sendTextMessage(chatId, "üì∏ –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit_profile");
        break;
    }
  }

  private void processCallbackQuery(Long chatId, String data, Integer messageId) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    if (data.startsWith("edit_profile_")) {
      String field = data.replace("edit_profile_", "");
      processProfileEdit(chatId, field, messageId);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    if (data.startsWith("gender_")) {
      String gender = data.replace("gender_", "");
      userService.updateUserGender(chatId, gender);
      
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "‚úÖ –í–∞—à –ø–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + getGenderDisplay(gender));
      
      sendTextMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:");
      userStates.put(chatId, UserState.WAITING_FOR_PHOTO);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É
    if (data.startsWith("gender_pref_")) {
      String genderPref = data.replace("gender_pref_", "");
      
      User user = userService.getUserByTelegramId(chatId);
      userService.updateUserSearchPreferences(chatId, user.getMinAgePreference(), user.getMaxAgePreference(), genderPref);
      
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n" +
                             "üîç –í–æ–∑—Ä–∞—Å—Ç: " + user.getMinAgePreference() + " - " + user.getMaxAgePreference() + " –ª–µ—Ç\n" +
                             "üë• –ü–æ–ª: " + getGenderPreferenceDisplay(genderPref));
      
      userStates.put(chatId, UserState.NONE);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (data.equals("1 —á–∞—Å") || data.equals("3 —á–∞—Å–∞") || data.equals("6 —á–∞—Å–æ–≤")) {
      int duration = Integer.parseInt(data.split(" ")[0]);
      userLiveLocationDurations.put(chatId, duration);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∏—Å–∫ –ª—é–¥–µ–π —Ä—è–¥–æ–º –Ω–∞ " + duration + " —á–∞—Å–æ–≤.");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–∞–¥–∏—É—Å–∞
      sendRadiusSelection(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
    if (data.equals("1 –∫–º") || data.equals("3 –∫–º") || data.equals("5 –∫–º") || data.equals("1500 –∫–º")) {
      int radius = Integer.parseInt(data.split(" ")[0]);
      userSearchRadius.put(chatId, radius);

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ " + radius + " –∫–º.");

      // –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      requestLiveLocation(chatId);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    if (data.startsWith("send_request_")) {
      Long receiverId = Long.parseLong(data.replace("send_request_", ""));
      meetingRequestTargets.put(chatId, receiverId);
      
      deleteMessage(chatId, messageId);
      sendTextMessage(chatId, "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:");
      userStates.put(chatId, UserState.WAITING_FOR_MEETING_MESSAGE);
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.equals("next_user")) {
      showNextUser(chatId, messageId);
      return;
    }
    
    if (data.equals("prev_user")) {
      showPreviousUser(chatId, messageId);
      return;
    }

    // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    if (data.startsWith("accept_request_")) {
      Long senderId = Long.parseLong(data.replace("accept_request_", ""));
      Long receiverId = chatId;

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
      List<MeetingRequest> requests = meetingService.getPendingRequestsForUser(receiverId);
      for (MeetingRequest request : requests) {
        if (request.getSender().getTelegramId().equals(senderId)) {
          meetingService.acceptMeetingRequest(request.getId());
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          sendTextMessage(senderId, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –±—ã–ª –ø—Ä–∏–Ω—è—Ç!");
          sendTextMessage(chatId, "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!");
          break;
        }
      }
    }

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    if (data.startsWith("decline_request_")) {
      Long senderId = Long.parseLong(data.replace("decline_request_", ""));
      Long receiverId = chatId;

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
      List<MeetingRequest> requests = meetingService.getPendingRequestsForUser(receiverId);
      for (MeetingRequest request : requests) {
        if (request.getSender().getTelegramId().equals(senderId)) {
          meetingService.declineMeetingRequest(request.getId());
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          sendTextMessage(senderId, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.");
          sendTextMessage(chatId, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.");
          break;
        }
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private void showUserProfile(Long chatId) {
    User user = userService.getUserByTelegramId(chatId);
    
    if (user == null) {
      sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.");
      return;
    }
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª—è
    if (user.getPhotoFileId() != null && !user.getPhotoFileId().isEmpty()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(chatId.toString());
      photoMessage.setPhoto(new InputFile(user.getPhotoFileId()));
      photoMessage.setCaption(user.getProfileInfo());
      photoMessage.setParseMode("Markdown");
      
      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        sendTextMessage(chatId, user.getProfileInfo());
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º
      SendMessage message = new SendMessage();
      message.setChatId(chatId.toString());
      message.setText(user.getProfileInfo() + 
          "\nüîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.");
      message.setParseMode("Markdown");
      executeMessage(message);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
    int completionPercentage = user.getProfileCompletionPercentage();
    sendTextMessage(chatId, "üèÜ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ " + completionPercentage + "%");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    SendMessage editMessage = new SendMessage();
    editMessage.setChatId(chatId.toString());
    editMessage.setText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ?");
    
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    
    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–û–ø–∏—Å–∞–Ω–∏–µ", "edit_profile_description"));
    row1.add(createButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", "edit_profile_interests"));
    rowsInline.add(row1);
    
    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–í–æ–∑—Ä–∞—Å—Ç", "edit_profile_age"));
    row2.add(createButton("–ü–æ–ª", "edit_profile_gender"));
    rowsInline.add(row2);
    
    List<InlineKeyboardButton> row3 = new ArrayList<>();
    row3.add(createButton("–§–æ—Ç–æ", "edit_profile_photo"));
    row3.add(createButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", "edit_profile_search"));
    rowsInline.add(row3);
    
    markupInline.setKeyboard(rowsInline);
    editMessage.setReplyMarkup(markupInline);
    
    executeMessage(editMessage);
  }
  
  /**
   * –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   */
  private void startProfileEditing(Long chatId) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:");
    
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    
    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–û–ø–∏—Å–∞–Ω–∏–µ", "edit_profile_description"));
    row1.add(createButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", "edit_profile_interests"));
    rowsInline.add(row1);
    
    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–í–æ–∑—Ä–∞—Å—Ç", "edit_profile_age"));
    row2.add(createButton("–ü–æ–ª", "edit_profile_gender"));
    rowsInline.add(row2);
    
    List<InlineKeyboardButton> row3 = new ArrayList<>();
    row3.add(createButton("–§–æ—Ç–æ", "edit_profile_photo"));
    row3.add(createButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", "edit_profile_search"));
    rowsInline.add(row3);
    
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    
    executeMessage(message);
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
   */
  private void showSearchSettings(Long chatId) {
    User user = userService.getUserByTelegramId(chatId);
    
    if (user == null) {
      sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_profile, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.");
      return;
    }
    
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    
    StringBuilder settingsInfo = new StringBuilder();
    settingsInfo.append("üîç *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:*\n\n");
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    String ageRange = "–õ—é–±–æ–π";
    if (user.getMinAgePreference() != null && user.getMaxAgePreference() != null) {
      ageRange = user.getMinAgePreference() + " - " + user.getMaxAgePreference() + " –ª–µ—Ç";
    } else if (user.getMinAgePreference() != null) {
      ageRange = "–æ—Ç " + user.getMinAgePreference() + " –ª–µ—Ç";
    } else if (user.getMaxAgePreference() != null) {
      ageRange = "–¥–æ " + user.getMaxAgePreference() + " –ª–µ—Ç";
    }
    
    settingsInfo.append("üéØ *–í–æ–∑—Ä–∞—Å—Ç:* ").append(ageRange).append("\n");
    settingsInfo.append("üë• *–ü–æ–ª:* ").append(user.getGenderPreferenceDisplay()).append("\n");
    settingsInfo.append("üìç *–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:* ").append(user.getSearchRadius()).append(" –∫–º\n");
    
    message.setText(settingsInfo.toString());
    message.setParseMode("Markdown");
    executeMessage(message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    SendMessage editMessage = new SendMessage();
    editMessage.setChatId(chatId.toString());
    editMessage.setText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?");
    
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    
    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", "edit_profile_age_range"));
    rowsInline.add(row1);
    
    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª", "edit_profile_gender_pref"));
    rowsInline.add(row2);
    
    markupInline.setKeyboard(rowsInline);
    editMessage.setReplyMarkup(markupInline);
    
    executeMessage(editMessage);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   */
  private void processProfileEdit(Long chatId, String field, Integer messageId) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    deleteMessage(chatId, messageId);

    switch (field) {
      case "description":
        sendTextMessage(chatId, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):");
        userStates.put(chatId, UserState.WAITING_FOR_DESCRIPTION);
        break;

      case "interests":
        sendTextMessage(chatId, "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ö–æ–±–±–∏ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):");
        userStates.put(chatId, UserState.WAITING_FOR_INTERESTS);
        break;

      case "age":
        sendTextMessage(chatId, "üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 100):");
        userStates.put(chatId, UserState.WAITING_FOR_AGE);
        break;

      case "gender":
        sendGenderSelection(chatId);
        userStates.put(chatId, UserState.WAITING_FOR_GENDER);
        break;

      case "photo":
        sendTextMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:");
        userStates.put(chatId, UserState.WAITING_FOR_PHOTO);
        break;

      case "search":
        showSearchSettings(chatId);
        break;

      case "age_range":
        sendTextMessage(chatId, "üéØ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 100):");
        userStates.put(chatId, UserState.WAITING_FOR_MIN_AGE);
        break;

      case "gender_pref":
        sendGenderPreferenceSelection(chatId);
        userStates.put(chatId, UserState.WAITING_FOR_GENDER_PREFERENCE);
        break;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
   */
  private void sendTimeSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(),
        "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 —á–∞—Å", "1 —á–∞—Å"));
    rowInline.add(createButton("3 —á–∞—Å–∞", "3 —á–∞—Å–∞"));
    rowInline.add(createButton("6 —á–∞—Å–æ–≤", "6 —á–∞—Å–æ–≤"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
   */
  private void sendRadiusSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 –∫–º", "1 –∫–º"));
    rowInline.add(createButton("3 –∫–º", "3 –∫–º"));
    rowInline.add(createButton("5 –∫–º", "5 –∫–º"));
    rowInline.add(createButton("1500 –∫–º", "1500 –∫–º"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
   */
  private void sendGenderSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("–ú—É–∂—Å–∫–æ–π", "gender_male"));
    rowInline.add(createButton("–ñ–µ–Ω—Å–∫–∏–π", "gender_female"));
    rowsInline.add(rowInline);

    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–î—Ä—É–≥–æ–π", "gender_other"));
    rowsInline.add(row2);

    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
   */
  private void sendGenderPreferenceSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("–ú—É–∂—Å–∫–æ–π", "gender_pref_male"));
    rowInline.add(createButton("–ñ–µ–Ω—Å–∫–∏–π", "gender_pref_female"));
    rowsInline.add(rowInline);

    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–õ—é–±–æ–π", "gender_pref_any"));
    rowsInline.add(row2);

    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private void requestLiveLocation(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(),
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–∞—Å –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏:");
    executeMessage(message);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
   */
  private void showCurrentNearbyUser(Long chatId) {
    List<User> nearbyUsers = nearbyUsersCache.get(chatId);
    Integer currentIndex = currentUserIndexCache.get(chatId);

    if (nearbyUsers == null || nearbyUsers.isEmpty()) {
      sendTextMessage(chatId,
          "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n" +
              "üìç –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ " + userLiveLocationDurations.getOrDefault(chatId, 0) +
              " —á–∞—Å–æ–≤. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–∫–∞–∂–µ—Ç—Å—è —Ä—è–¥–æ–º, –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º!");
      return;
    }

    if (currentIndex == null || currentIndex < 0 || currentIndex >= nearbyUsers.size()) {
      currentIndex = 0;
      currentUserIndexCache.put(chatId, currentIndex);
    }

    User profile = nearbyUsers.get(currentIndex);

    // –ï—Å–ª–∏ username == null, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    String displayName = getDisplayName(profile);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    StringBuilder profileInfo = new StringBuilder();
    profileInfo.append("‚ú® @").append(displayName).append(" —Ä—è–¥–æ–º!");

    if (profile.getAge() != null) {
      profileInfo.append("\n\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ").append(profile.getAge());
    }

    if (profile.getGender() != null && !profile.getGender().isEmpty()) {
      profileInfo.append("\n‚öß –ü–æ–ª: ").append(profile.getGenderDisplay());
    }

    if (profile.getDescription() != null && !profile.getDescription().isEmpty()) {
      profileInfo.append("\n\nüìù –û —Å–µ–±–µ: ").append(profile.getDescription());
    }

    if (profile.getInterests() != null && !profile.getInterests().isEmpty()) {
      profileInfo.append("\n\n‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å—ã: ").append(profile.getInterests());
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
    profileInfo.append("\n\nüî¢ –ü—Ä–æ—Ñ–∏–ª—å ").append(currentIndex + 1).append(" –∏–∑ ").append(nearbyUsers.size());

    message.setText(profileInfo.toString());

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    List<InlineKeyboardButton> navigationRow = new ArrayList<>();

    if (nearbyUsers.size() > 1) {
      InlineKeyboardButton prevButton = new InlineKeyboardButton();
      prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π");
      prevButton.setCallbackData("prev_user");
      navigationRow.add(prevButton);

      InlineKeyboardButton nextButton = new InlineKeyboardButton();
      nextButton.setText("–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è");
      nextButton.setCallbackData("next_user");
      navigationRow.add(nextButton);

      rowsInline.add(navigationRow);
    }

    // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    List<InlineKeyboardButton> actionRow = new ArrayList<>();

    InlineKeyboardButton sendRequestButton = new InlineKeyboardButton();
    sendRequestButton.setText("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
    sendRequestButton.setCallbackData("send_request_" + profile.getTelegramId());

    actionRow.add(sendRequestButton);
    rowsInline.add(actionRow);

    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);

    executeMessage(message);

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if (profile.getPhotoFileId() != null && !profile.getPhotoFileId().isEmpty()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(chatId.toString());
      photoMessage.setPhoto(new InputFile(profile.getPhotoFileId()));

      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
   */
  private void showNextUser(Long chatId, Integer messageId) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    deleteMessage(chatId, messageId);

    List<User> nearbyUsers = nearbyUsersCache.get(chatId);
    Integer currentIndex = currentUserIndexCache.get(chatId);

    if (nearbyUsers == null || nearbyUsers.isEmpty() || currentIndex == null) {
      sendTextMessage(chatId, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.");
      return;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
    currentIndex = (currentIndex + 1) % nearbyUsers.size();
    currentUserIndexCache.put(chatId, currentIndex);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showCurrentNearbyUser(chatId);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
   */
  private void showPreviousUser(Long chatId, Integer messageId) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    deleteMessage(chatId, messageId);

    List<User> nearbyUsers = nearbyUsersCache.get(chatId);
    Integer currentIndex = currentUserIndexCache.get(chatId);

    if (nearbyUsers == null || nearbyUsers.isEmpty() || currentIndex == null) {
      sendTextMessage(chatId, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.");
      return;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤ —Å–ø–∏—Å–∫–µ
    currentIndex = (currentIndex - 1 + nearbyUsers.size()) % nearbyUsers.size();
    currentUserIndexCache.put(chatId, currentIndex);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showCurrentNearbyUser(chatId);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
   */
  private void notifyUserAboutMeetingRequest(Long receiverId, Long senderId) {
    User sender = userService.getUserByTelegramId(senderId);
    String senderName = getDisplayName(sender);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    List<MeetingRequest> requests = meetingService.getPendingRequestsForUser(receiverId);
    MeetingRequest request = null;

    for (MeetingRequest req : requests) {
      if (req.getSender().getTelegramId().equals(senderId)) {
        request = req;
        break;
      }
    }

    if (request == null) {
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      sendTextMessage(receiverId, "‚ú® " + senderName + " –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
    StringBuilder requestInfo = new StringBuilder();
    requestInfo.append("‚ú® ").append(senderName).append(" –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!");

    if (sender.getAge() != null) {
      requestInfo.append("\n\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ").append(sender.getAge());
    }

    if (sender.getGender() != null && !sender.getGender().isEmpty()) {
      requestInfo.append("\n‚öß –ü–æ–ª: ").append(sender.getGenderDisplay());
    }

    if (sender.getDescription() != null && !sender.getDescription().isEmpty()) {
      requestInfo.append("\n\nüìù –û —Å–µ–±–µ: ").append(sender.getDescription());
    }

    if (sender.getInterests() != null && !sender.getInterests().isEmpty()) {
      requestInfo.append("\n\n‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å—ã: ").append(sender.getInterests());
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    requestInfo.append("\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ").append(request.getMessage());

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    SendMessage message = new SendMessage();
    message.setChatId(receiverId.toString());
    message.setText(requestInfo.toString());

    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    InlineKeyboardButton acceptButton = new InlineKeyboardButton();
    acceptButton.setText("‚úÖ –ü—Ä–∏–Ω—è—Ç—å");
    acceptButton.setCallbackData("accept_request_" + senderId);

    InlineKeyboardButton declineButton = new InlineKeyboardButton();
    declineButton.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
    declineButton.setCallbackData("decline_request_" + senderId);

    rowInline.add(acceptButton);
    rowInline.add(declineButton);
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);

    executeMessage(message);

    // –ï—Å–ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –µ—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if (sender.getPhotoFileId() != null && !sender.getPhotoFileId().isEmpty()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(receiverId.toString());
      photoMessage.setPhoto(new InputFile(sender.getPhotoFileId()));

      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
      }
    }

    // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if (request.hasPhoto()) {
      SendPhoto photoMessage = new SendPhoto();
      photoMessage.setChatId(receiverId.toString());
      photoMessage.setPhoto(new InputFile(request.getPhotoFileId()));
      photoMessage.setCaption("üì∏ –§–æ—Ç–æ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É");

      try {
        execute(photoMessage);
      } catch (TelegramApiException e) {
        e.printStackTrace();
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private void sendTextMessage(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(text);
    executeMessage(message);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  private InlineKeyboardButton createButton(String text, String callbackData) {
    InlineKeyboardButton button = new InlineKeyboardButton();
    button.setText(text);
    button.setCallbackData(callbackData);
    return button;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private void deleteMessage(Long chatId, Integer messageId) {
    try {
      execute(new DeleteMessage(chatId.toString(), messageId));
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private void executeMessage(SendMessage message) {
    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private String getDisplayName(User user) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: username -> firstName -> "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if (user.getUsername() != null && !user.getUsername().isEmpty()) {
      return user.getUsername();
    } else if (user.getFirstName() != null && !user.getFirstName().isEmpty()) {
      String displayName = user.getFirstName();
      if (user.getLastName() != null && !user.getLastName().isEmpty()) {
        displayName += " " + user.getLastName();
      }
      return displayName;
    } else {
      return "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private String getGenderDisplay(String gender) {
    if (gender == null) return "–ù–µ —É–∫–∞–∑–∞–Ω";
    return switch (gender) {
      case "male" -> "–ú—É–∂—Å–∫–æ–π";
      case "female" -> "–ñ–µ–Ω—Å–∫–∏–π";
      case "other" -> "–î—Ä—É–≥–æ–π";
      default -> "–ù–µ —É–∫–∞–∑–∞–Ω";
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private String getGenderPreferenceDisplay(String genderPref) {
    if (genderPref == null) return "–õ—é–±–æ–π";
    return switch (genderPref) {
      case "male" -> "–ú—É–∂—Å–∫–æ–π";
      case "female" -> "–ñ–µ–Ω—Å–∫–∏–π";
      case "any" -> "–õ—é–±–æ–π";
      default -> "–õ—é–±–æ–π";
    };
  }

  @Override
  public String getBotUsername() {
    return "GeoGreet_bot";
  }

  @Override
  public String getBotToken() {
    return "7906499880:AAGXfaTwF3JXOsiYxIl_yvYdO696Po2DVOU";
  }
}