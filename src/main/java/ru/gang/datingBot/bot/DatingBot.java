package ru.gang.datingBot.bot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.springframework.stereotype.Component;
import ru.gang.datingBot.model.User;
import ru.gang.datingBot.service.MeetingService;
import ru.gang.datingBot.service.UserService;

import java.util.*;

@Component
public class DatingBot extends TelegramLongPollingBot {
  private final UserService userService;
  private final MeetingService meetingService;
  private final Map<Long, Integer> userLiveLocationDurations = new HashMap<>();
  private final Map<Long, Integer> userSearchRadius = new HashMap<>();
  private final Map<Long, Long> userPendingRequests = new HashMap<>();

  public DatingBot(UserService userService, MeetingService meetingService) {
    this.userService = userService;
    this.meetingService = meetingService;
  }

  @Override
  public void onUpdateReceived(Update update) {
    System.out.println("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + update);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.hasMessage() && update.getMessage().hasText()) {
      var message = update.getMessage();
      Long chatId = message.getChatId();
      String text = message.getText();

      switch (text) {
        case "/start":
          sendTimeSelection(chatId);
          break;
        case "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
          userService.deactivateUser(chatId);
          sendTextMessage(chatId, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏–º—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
          break;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    if (update.hasCallbackQuery()) {
      var callbackQuery = update.getCallbackQuery();
      String data = callbackQuery.getData();
      Long chatId = callbackQuery.getMessage().getChatId();

      System.out.println("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: " + data);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
      if (data.equals("1 —á–∞—Å") || data.equals("3 —á–∞—Å–∞") || data.equals("6 —á–∞—Å–æ–≤")) {
        int duration = Integer.parseInt(data.split(" ")[0]);
        userLiveLocationDurations.put(chatId, duration);
        sendRadiusSelection(chatId);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
      if (data.equals("1 –∫–º") || data.equals("3 –∫–º") || data.equals("5 –∫–º")) {
        int radius = Integer.parseInt(data.split(" ")[0]);
        userSearchRadius.put(chatId, radius);
        requestLiveLocation(chatId);
      }
    }
  }


  private void sendTimeSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 —á–∞—Å", "1 —á–∞—Å"));
    rowInline.add(createButton("3 —á–∞—Å–∞", "3 —á–∞—Å–∞"));
    rowInline.add(createButton("6 —á–∞—Å–æ–≤", "6 —á–∞—Å–æ–≤"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  private void sendRadiusSelection(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:");
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("1 –∫–º", "1 –∫–º"));
    rowInline.add(createButton("3 –∫–º", "3 –∫–º"));
    rowInline.add(createButton("5 –∫–º", "5 –∫–º"));
    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);
    message.setReplyMarkup(markupInline);
    executeMessage(message);
  }

  private void requestLiveLocation(Long chatId) {
    SendMessage message = new SendMessage(chatId.toString(), "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–∞—Å –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏:");
    executeMessage(message);
  }

  private void suggestNearbyUser(Long chatId, double lat, double lon, int radius) {
    List<User> nearbyUsers = userService.findNearbyUsers(lat, lon, radius);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ null –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if (nearbyUsers != null && !nearbyUsers.isEmpty()) {
      User profile = nearbyUsers.get(0);
      SendMessage message = new SendMessage();
      message.setChatId(chatId);
      message.setText("‚ú® " + profile.getUsername() + " —Ä—è–¥–æ–º!\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å?");

      InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
      List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
      List<InlineKeyboardButton> rowInline = new ArrayList<>();

      InlineKeyboardButton sendRequestButton = new InlineKeyboardButton();
      sendRequestButton.setText("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
      sendRequestButton.setCallbackData("send_request_" + profile.getTelegramId());

      rowInline.add(sendRequestButton);
      rowsInline.add(rowInline);
      markupInline.setKeyboard(rowsInline);
      message.setReplyMarkup(markupInline);

      executeMessage(message);
    } else {
      sendTextMessage(chatId, "üòî –ü–æ–∫–∞ —Ä—è–¥–æ–º –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
    }
  }

  private void sendTextMessage(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(text);
    executeMessage(message);
  }



  private void sendMeetingRequestPrompt(Long chatId, Long receiverId) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId);
    message.setText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∏:");

    userPendingRequests.put(chatId, receiverId);
    executeMessage(message);
  }

  private InlineKeyboardButton createButton(String text, String callbackData) {
    InlineKeyboardButton button = new InlineKeyboardButton();
    button.setText(text);
    button.setCallbackData(callbackData);
    return button;
  }

  private void executeMessage(SendMessage message) {
    try {
      execute(message);
    } catch (TelegramApiException e) {
      e.printStackTrace();
    }
  }

  @Override
  public String getBotUsername() {
    return "GeoGreetBot";
  }

  @Override
  public String getBotToken() {
    return "6933686090:AAGCO0I-zEu00iKA-aCQ13GKYL0e-kgVDos";
  }
}
