package ru.gang.datingBot.bot;

import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;

public class KeyboardService {

  public InlineKeyboardButton createButton(String text, String callbackData) {
    InlineKeyboardButton button = new InlineKeyboardButton();
    button.setText(text);
    button.setCallbackData(callbackData);
    return button;
  }

  public InlineKeyboardMarkup createTimeSelectionKeyboard() {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    rowInline.add(createButton("1 —á–∞—Å", "1 —á–∞—Å"));
    rowInline.add(createButton("3 —á–∞—Å–∞", "3 —á–∞—Å–∞"));
    rowInline.add(createButton("6 —á–∞—Å–æ–≤", "6 —á–∞—Å–æ–≤"));

    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);

    return markupInline;
  }

  public InlineKeyboardMarkup createRadiusSelectionKeyboard() {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    rowInline.add(createButton("1 –∫–º", "1 –∫–º"));
    rowInline.add(createButton("3 –∫–º", "3 –∫–º"));
    rowInline.add(createButton("5 –∫–º", "5 –∫–º"));
    rowInline.add(createButton("1500 –∫–º", "1500 –∫–º"));

    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);

    return markupInline;
  }

  public InlineKeyboardMarkup createGenderSelectionKeyboard() {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("–ú—É–∂—Å–∫–æ–π", "gender_male"));
    rowInline.add(createButton("–ñ–µ–Ω—Å–∫–∏–π", "gender_female"));
    rowsInline.add(rowInline);

    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–î—Ä—É–≥–æ–π", "gender_other"));
    rowsInline.add(row2);

    markupInline.setKeyboard(rowsInline);
    return markupInline;
  }

  public InlineKeyboardMarkup createGenderPreferenceKeyboard() {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    List<InlineKeyboardButton> rowInline = new ArrayList<>();
    rowInline.add(createButton("–ú—É–∂—Å–∫–æ–π", "gender_pref_male"));
    rowInline.add(createButton("–ñ–µ–Ω—Å–∫–∏–π", "gender_pref_female"));
    rowsInline.add(rowInline);

    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–õ—é–±–æ–π", "gender_pref_any"));
    rowsInline.add(row2);

    markupInline.setKeyboard(rowsInline);
    return markupInline;
  }

  public InlineKeyboardMarkup createProfileEditKeyboard() {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–û–ø–∏—Å–∞–Ω–∏–µ", "edit_profile_description"));
    row1.add(createButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", "edit_profile_interests"));
    rowsInline.add(row1);

    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–í–æ–∑—Ä–∞—Å—Ç", "edit_profile_age"));
    row2.add(createButton("–ü–æ–ª", "edit_profile_gender"));
    rowsInline.add(row2);

    List<InlineKeyboardButton> row3 = new ArrayList<>();
    row3.add(createButton("–§–æ—Ç–æ", "edit_profile_photo"));
    row3.add(createButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", "edit_profile_search"));
    rowsInline.add(row3);

    markupInline.setKeyboard(rowsInline);
    return markupInline;
  }

  public InlineKeyboardMarkup createNearbyUserNavigationKeyboard(Long targetUserId, boolean hasMultipleUsers) {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    if (hasMultipleUsers) {
      List<InlineKeyboardButton> navigationRow = new ArrayList<>();
      navigationRow.add(createButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", "prev_user"));
      navigationRow.add(createButton("–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", "next_user"));
      rowsInline.add(navigationRow);
    }

    List<InlineKeyboardButton> actionRow = new ArrayList<>();
    actionRow.add(createButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "send_request_" + targetUserId));
    rowsInline.add(actionRow);

    markupInline.setKeyboard(rowsInline);
    return markupInline;
  }

  public InlineKeyboardMarkup createMeetingRequestKeyboard(Long senderId) {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
    List<InlineKeyboardButton> rowInline = new ArrayList<>();

    rowInline.add(createButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "accept_request_" + senderId));
    rowInline.add(createButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "decline_request_" + senderId));

    rowsInline.add(rowInline);
    markupInline.setKeyboard(rowsInline);

    return markupInline;
  }

  public InlineKeyboardMarkup createSearchSettingsKeyboard() {
    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

    List<InlineKeyboardButton> row1 = new ArrayList<>();
    row1.add(createButton("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", "edit_profile_age_range"));
    rowsInline.add(row1);

    List<InlineKeyboardButton> row2 = new ArrayList<>();
    row2.add(createButton("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª", "edit_profile_gender_pref"));
    rowsInline.add(row2);

    markupInline.setKeyboard(rowsInline);
    return markupInline;
  }

  public ReplyKeyboardMarkup createLocationRequestKeyboard() {
    KeyboardButton locationButton = new KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π");
    locationButton.setRequestLocation(true);

    KeyboardButton stopButton = new KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫");

    KeyboardRow row = new KeyboardRow();
    row.add(locationButton);

    KeyboardRow row2 = new KeyboardRow();
    row2.add(stopButton);

    List<KeyboardRow> keyboard = new ArrayList<>();
    keyboard.add(row);
    keyboard.add(row2);

    ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
    replyKeyboardMarkup.setKeyboard(keyboard);
    replyKeyboardMarkup.setResizeKeyboard(true);

    return replyKeyboardMarkup;
  }

  public ReplyKeyboardMarkup createMainKeyboard() {
    ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
    markup.setResizeKeyboard(true);
    markup.setSelective(false);
    markup.setOneTimeKeyboard(false);

    List<KeyboardRow> keyboard = new ArrayList<>();

    KeyboardRow row1 = new KeyboardRow();
    row1.add(new KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"));
    row1.add(new KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"));

    KeyboardRow row2 = new KeyboardRow();
    row2.add(new KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"));

    keyboard.add(row1);
    keyboard.add(row2);

    markup.setKeyboard(keyboard);
    return markup;
  }
}