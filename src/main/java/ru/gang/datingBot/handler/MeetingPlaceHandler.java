package ru.gang.datingBot.handler;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.gang.datingBot.bot.KeyboardService;
import ru.gang.datingBot.bot.MessageSender;
import ru.gang.datingBot.bot.UserStateManager;
import ru.gang.datingBot.model.MeetingRequest;
import ru.gang.datingBot.model.Place;
import ru.gang.datingBot.model.User;
import ru.gang.datingBot.service.MeetingService;
import ru.gang.datingBot.service.PlaceService;
import ru.gang.datingBot.service.UserService;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;

@Component
@RequiredArgsConstructor
public class MeetingPlaceHandler {

    private final UserService userService;
    private final MeetingService meetingService;
    private final PlaceService placeService;
    private final UserStateManager stateManager;
    private final KeyboardService keyboardService;
    private final MessageSender messageSender;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /meet
     */
    public void processMeetCommand(Long chatId) {
        Long targetUserId = stateManager.getCurrentChatUser(chatId);
        Long meetingRequestId = stateManager.getCurrentChatMeetingRequest(chatId);
        
        if (targetUserId == null || meetingRequestId == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
            return;
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
        messageSender.sendTextMessage(chatId, 
                "üèôÔ∏è –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Ñ–µ–π–Ω—è, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –ø–∞—Ä–∫):");
        stateManager.setUserState(chatId, UserStateManager.UserState.WAITING_FOR_PLACE_TYPE);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
     */
    public void processPlaceTypeInput(Long chatId, String placeType) {
        Long targetUserId = stateManager.getCurrentChatUser(chatId);
        Long meetingRequestId = stateManager.getCurrentChatMeetingRequest(chatId);
        
        User currentUser = userService.getUserByTelegramId(chatId);
        User targetUser = userService.getUserByTelegramId(targetUserId);
        
        if (currentUser == null || targetUser == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            stateManager.setUserState(chatId, UserStateManager.UserState.NONE);
            return;
        }
        
        messageSender.sendTextMessage(chatId, "üîç –ò—â–µ–º " + placeType + " –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...");
        
        List<Place> places = placeService.findPlacesBetweenUsers(
                currentUser, targetUser, placeType, 1000);
        
        if (places.isEmpty()) {
            messageSender.sendTextMessage(chatId, 
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è.");
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –∫—ç—à–µ
        stateManager.cachePlaces(chatId, places);
        stateManager.setCurrentPlaceIndex(chatId, 0);
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π meetingRequestId
        stateManager.savePendingMeetingRequestId(chatId, meetingRequestId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
        showCurrentPlace(chatId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ –Ω–∞—á–∞–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
        String senderName = currentUser.getFirstName() != null ? 
                currentUser.getFirstName() : (currentUser.getUsername() != null ? "@" + currentUser.getUsername() : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
        
        messageSender.sendTextMessage(targetUserId, 
                "üèôÔ∏è " + senderName + " –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏: " + placeType);
        
        stateManager.setUserState(chatId, UserStateManager.UserState.VIEWING_PLACES);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
     */
    public void showCurrentPlace(Long chatId) {
        List<Place> places = stateManager.getCachedPlaces(chatId);
        Integer currentIndex = stateManager.getCurrentPlaceIndex(chatId);
        
        if (places == null || places.isEmpty() || currentIndex == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ—Å—Ç.");
            return;
        }
        
        Place place = places.get(currentIndex);
        
        StringBuilder info = new StringBuilder();
        info.append("üè¢ *").append(place.getName()).append("*\n\n");
        if (place.getAddress() != null) {
            info.append("üìç –ê–¥—Ä–µ—Å: ").append(place.getAddress()).append("\n");
        }
        if (place.getRating() != null) {
            info.append("‚≠ê –†–µ–π—Ç–∏–Ω–≥: ").append(place.getRating()).append("/5\n\n");
        }
        if (place.getDescription() != null && !place.getDescription().isEmpty()) {
            info.append(place.getDescription()).append("\n\n");
        }
        info.append("üî¢ –ú–µ—Å—Ç–æ ").append(currentIndex + 1).append(" –∏–∑ ").append(places.size());
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        InlineKeyboardMarkup keyboard = keyboardService.createPlaceNavigationKeyboard(
                place.getId(), places.size() > 1);
        
        if (place.getPhotoUrl() != null && !place.getPhotoUrl().isEmpty()) {
            messageSender.sendPhotoWithMarkdown(chatId, place.getPhotoUrl(), info.toString());
            messageSender.sendTextMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
        } else {
            messageSender.sendMarkdownMessageWithKeyboard(chatId, info.toString(), keyboard);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ
     */
    public void showNextPlace(Long chatId) {
        List<Place> places = stateManager.getCachedPlaces(chatId);
        Integer currentIndex = stateManager.getCurrentPlaceIndex(chatId);
        
        if (places == null || places.isEmpty() || currentIndex == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.");
            return;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—Ç—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        currentIndex = (currentIndex + 1) % places.size();
        stateManager.setCurrentPlaceIndex(chatId, currentIndex);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
        showCurrentPlace(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ
     */
    public void showPreviousPlace(Long chatId) {
        List<Place> places = stateManager.getCachedPlaces(chatId);
        Integer currentIndex = stateManager.getCurrentPlaceIndex(chatId);
        
        if (places == null || places.isEmpty() || currentIndex == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.");
            return;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—Ç—É –∏–ª–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤ —Å–ø–∏—Å–∫–µ
        currentIndex = (currentIndex - 1 + places.size()) % places.size();
        stateManager.setCurrentPlaceIndex(chatId, currentIndex);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
        showCurrentPlace(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞
     */
    public void processPlaceSelection(Long chatId, Long placeId) {
        Place place = placeService.getPlaceById(placeId);
        
        if (place == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
        stateManager.saveSelectedPlaceId(chatId, placeId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        messageSender.sendTextMessageWithKeyboard(
                chatId,
                "üìÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ " + place.getName() + ". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –≤—Å—Ç—Ä–µ—á–∏:",
                keyboardService.createDateSelectionKeyboard());
        
        stateManager.setUserState(chatId, UserStateManager.UserState.WAITING_FOR_DATE);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã
     */
    public void processDateSelection(Long chatId, String dateString) {
        stateManager.saveSelectedDate(chatId, dateString);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        messageSender.sendTextMessageWithKeyboard(
                chatId,
                "üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:",
                keyboardService.createMeetingTimeSelectionKeyboard());
        
        stateManager.setUserState(chatId, UserStateManager.UserState.WAITING_FOR_TIME);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
     */
    public void processTimeSelection(Long chatId, String timeString) {
        stateManager.saveSelectedTime(chatId, timeString);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        Long placeId = stateManager.getSelectedPlaceId(chatId);
        String dateString = stateManager.getSelectedDate(chatId);
        Long meetingRequestId = stateManager.getPendingMeetingRequestId(chatId);
        Long targetUserId = stateManager.getCurrentChatUser(chatId);
        
        if (placeId == null || dateString == null || timeString == null || 
            meetingRequestId == null || targetUserId == null) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.");
            stateManager.setUserState(chatId, UserStateManager.UserState.NONE);
            stateManager.clearMeetingPlaceData(chatId);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ
        Place place = placeService.getPlaceById(placeId);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏
        LocalDate date = LocalDate.parse(dateString);
        LocalTime time = LocalTime.parse(timeString);
        LocalDateTime meetingDateTime = LocalDateTime.of(date, time);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        boolean success = meetingService.updateMeetingRequestWithPlace(
                meetingRequestId, place, meetingDateTime, chatId);
        
        if (!success) {
            messageSender.sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.");
            return;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd MMMM yyyy", new Locale("ru"));
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–µ
        StringBuilder meetingInfo = new StringBuilder();
        meetingInfo.append("üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ:\n\n");
        meetingInfo.append("üè¢ –ú–µ—Å—Ç–æ: ").append(place.getName()).append("\n");
        if (place.getAddress() != null) {
            meetingInfo.append("üìç –ê–¥—Ä–µ—Å: ").append(place.getAddress()).append("\n");
        }
        meetingInfo.append("üìÖ –î–∞—Ç–∞: ").append(date.format(dateFormatter)).append("\n");
        meetingInfo.append("üïí –í—Ä–µ–º—è: ").append(timeString).append("\n\n");
        meetingInfo.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        messageSender.sendTextMessageWithKeyboard(
                chatId,
                meetingInfo.toString(),
                keyboardService.createConfirmMeetingKeyboard(meetingRequestId));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
        User sender = userService.getUserByTelegramId(chatId);
        String senderName = sender.getFirstName() != null ? 
                sender.getFirstName() : (sender.getUsername() != null ? "@" + sender.getUsername() : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
        
        StringBuilder partnerInfo = new StringBuilder();
        partnerInfo.append("üì¢ ").append(senderName).append(" –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É:\n\n");
        partnerInfo.append("üè¢ –ú–µ—Å—Ç–æ: ").append(place.getName()).append("\n");
        if (place.getAddress() != null) {
            partnerInfo.append("üìç –ê–¥—Ä–µ—Å: ").append(place.getAddress()).append("\n");
        }
        partnerInfo.append("üìÖ –î–∞—Ç–∞: ").append(date.format(dateFormatter)).append("\n");
        partnerInfo.append("üïí –í—Ä–µ–º—è: ").append(timeString).append("\n\n");
        partnerInfo.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /meet");
        
        messageSender.sendTextMessageWithKeyboard(
                targetUserId,
                partnerInfo.toString(),
                keyboardService.createConfirmMeetingKeyboard(meetingRequestId));
        
        stateManager.setUserState(chatId, UserStateManager.UserState.WAITING_FOR_CONFIRMATION);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
     */
    public void processConfirmation(Long chatId, Long meetingRequestId) {
        boolean confirmed = meetingService.confirmMeetingByUser(meetingRequestId, chatId);
        
        if (confirmed) {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
            MeetingRequest request = meetingService.getMeetingRequestById(meetingRequestId);
            
            if (request != null && request.isPlaceConfirmedByBoth() && request.getSelectedPlace() != null) {
                // –û–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd MMMM yyyy HH:mm", new Locale("ru"));
                String meetingTimeFormatted = request.getMeetingTime().format(dateFormatter);
                Place place = request.getSelectedPlace();
                
                StringBuilder confirmationMessage = new StringBuilder();
                confirmationMessage.append("‚úÖ –í—Å—Ç—Ä–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–±–æ–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏!\n\n");
                confirmationMessage.append("üè¢ –ú–µ—Å—Ç–æ: ").append(place.getName()).append("\n");
                if (place.getAddress() != null) {
                    confirmationMessage.append("üìç –ê–¥—Ä–µ—Å: ").append(place.getAddress()).append("\n");
                }
                confirmationMessage.append("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ").append(meetingTimeFormatted).append("\n\n");
                confirmationMessage.append("–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏! üéâ");
                
                messageSender.sendTextMessage(request.getSender().getTelegramId(), confirmationMessage.toString());
                messageSender.sendTextMessage(request.getReceiver().getTelegramId(), confirmationMessage.toString());
            } else {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—ã
                messageSender.sendTextMessage(
                        chatId, 
                        "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.");
            }
        } else {
            messageSender.sendTextMessage(
                    chatId, 
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞
        stateManager.setUserState(chatId, UserStateManager.UserState.NONE);
        stateManager.clearMeetingPlaceData(chatId);
    }
}
