package ru.gang.datingBot.service;

import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.gang.datingBot.bot.MessageSender;
import ru.gang.datingBot.model.MeetingRequest;
import ru.gang.datingBot.model.Place;
import ru.gang.datingBot.model.User;
import ru.gang.datingBot.repository.MeetingRepository;
import ru.gang.datingBot.repository.UserRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class MeetingService {
  private final MeetingRepository meetingRepository;
  private final UserRepository userRepository;
  private final MessageSender messageSender;

  public MeetingService(
          MeetingRepository meetingRepository, 
          UserRepository userRepository, 
          @Lazy MessageSender messageSender) {  // –î–æ–±–∞–≤–ª—è–µ–º @Lazy –∑–¥–µ—Å—å
    this.meetingRepository = meetingRepository;
    this.userRepository = userRepository;
    this.messageSender = messageSender;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –±–µ–∑ —Ñ–æ—Ç–æ
   */
  public MeetingRequest sendMeetingRequest(Long senderId, Long receiverId, String message, LocalDateTime scheduledTime) {
    return sendMeetingRequest(senderId, receiverId, message, scheduledTime, null);
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å —Ñ–æ—Ç–æ
   */
  public MeetingRequest sendMeetingRequest(Long senderId, Long receiverId, String message, LocalDateTime scheduledTime, String photoFileId) {
    System.out.println("DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç " + senderId + " –∫ " + receiverId);
    User sender = userRepository.findByTelegramId(senderId)
        .orElseThrow(() -> new IllegalArgumentException("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + senderId));
    User receiver = userRepository.findByTelegramId(receiverId)
        .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + receiverId));

    MeetingRequest request = new MeetingRequest();
    request.setSender(sender);
    request.setReceiver(receiver);
    request.setMessage(message);
    request.setScheduledTime(scheduledTime);
    request.setStatus("pending");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if (photoFileId != null && !photoFileId.isEmpty()) {
      request.setPhotoFileId(photoFileId);
    }

    System.out.println("DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
    MeetingRequest savedRequest = meetingRepository.save(request);
    System.out.println("DEBUG: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID " + savedRequest.getId());
    
    return savedRequest;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public List<MeetingRequest> getPendingRequestsForUser(Long receiverId) {
    User receiver = userRepository.findByTelegramId(receiverId)
        .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    return meetingRepository.findByReceiverAndStatus(receiver, "pending");
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —Ç–∞–∫ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
   */
  public List<MeetingRequest> getAcceptedRequestsForUser(Long userId) {
    User user = userRepository.findByTelegramId(userId)
        .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + userId));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    List<MeetingRequest> allRequests = meetingRepository.findAll();
    
    return allRequests.stream()
            .filter(request -> "accepted".equals(request.getStatus()))
            .filter(request -> request.getSender().getTelegramId().equals(userId) || 
                             request.getReceiver().getTelegramId().equals(userId))
            .collect(Collectors.toList());
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
   */
  public void acceptMeetingRequest(Long requestId) {
    MeetingRequest request = meetingRepository.findById(requestId)
        .orElseThrow(() -> new IllegalArgumentException("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    request.setStatus("accepted");
    meetingRepository.save(request);
    System.out.println("DEBUG: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å ID " + requestId + " –ø—Ä–∏–Ω—è—Ç");
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
   */
  public void declineMeetingRequest(Long requestId) {
    MeetingRequest request = meetingRepository.findById(requestId)
        .orElseThrow(() -> new IllegalArgumentException("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    request.setStatus("declined");
    meetingRepository.save(request);
    System.out.println("DEBUG: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å ID " + requestId + " –æ—Ç–∫–ª–æ–Ω–µ–Ω");
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤)
   */
  public void completeMeeting(Long requestId) {
    MeetingRequest request = meetingRepository.findById(requestId)
        .orElseThrow(() -> new IllegalArgumentException("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    request.setStatus("completed");
    meetingRepository.save(request);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤
    sendFeedbackRequest(request);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏
   */
  private void sendFeedbackRequest(MeetingRequest request) {
    if (request.getSelectedPlace() == null) {
      return;
    }
    
    String message = "üëã –ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –≤ " + request.getSelectedPlace().getName() + "? " +
            "–ù–∞–¥–µ–µ–º—Å—è, –≤—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback";
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    messageSender.sendTextMessage(request.getSender().getTelegramId(), message);
    messageSender.sendTextMessage(request.getReceiver().getTelegramId(), message);
    
    System.out.println("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: " + 
            request.getSender().getTelegramId() + " –∏ " + 
            request.getReceiver().getTelegramId());
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤ (–∫–∞–∂–¥—ã–π —á–∞—Å)
   */
  @Scheduled(fixedRate = 3600000) // –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
  public void sendMeetingFeedbackRequests() {
    List<MeetingRequest> pastMeetings = meetingRepository.findPastMeetings(LocalDateTime.now().minusHours(1));

    for (MeetingRequest meeting : pastMeetings) {
      sendFeedbackRequest(meeting);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ ID
   */
  public MeetingRequest getMeetingRequestById(Long requestId) {
    return meetingRepository.findById(requestId)
        .orElseThrow(() -> new IllegalArgumentException("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –Ω–µ –Ω–∞–π–¥–µ–Ω"));
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
   * @return true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
   */
  @Transactional
  public boolean updateMeetingRequestWithPlace(Long requestId, Place place, LocalDateTime meetingTime, Long initiatorId) {
    try {
        MeetingRequest request = meetingRepository.findById(requestId)
                .orElseThrow(() -> new IllegalArgumentException("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –Ω–µ –Ω–∞–π–¥–µ–Ω: " + requestId));
        
        request.setSelectedPlace(place);
        request.setMeetingTime(meetingTime);
        request.setFeedbackSent(false);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        if (request.getSender().getTelegramId().equals(initiatorId)) {
            request.setSenderConfirmed(true);
            request.setReceiverConfirmed(false);
        } else if (request.getReceiver().getTelegramId().equals(initiatorId)) {
            request.setReceiverConfirmed(true);
            request.setSenderConfirmed(false);
        } else {
            return false; // –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤—Å—Ç—Ä–µ—á–∏
        }
        
        meetingRepository.save(request);
        return true;
    } catch (Exception e) {
        System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: " + e.getMessage());
        return false;
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @return true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
   */
  @Transactional
  public boolean confirmMeetingByUser(Long requestId, Long userId) {
    try {
        MeetingRequest request = meetingRepository.findById(requestId)
                .orElseThrow(() -> new IllegalArgumentException("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –Ω–µ –Ω–∞–π–¥–µ–Ω: " + requestId));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
        if (request.getSender().getTelegramId().equals(userId)) {
            request.setSenderConfirmed(true);
        } else if (request.getReceiver().getTelegramId().equals(userId)) {
            request.setReceiverConfirmed(true);
        } else {
            return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤—Å—Ç—Ä–µ—á–∏
        }
        
        meetingRepository.save(request);
        return true;
    } catch (Exception e) {
        System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: " + e.getMessage());
        return false;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å—Ç—Ä–µ—á–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   */
  public List<MeetingRequest> findMeetingsForFeedback(LocalDateTime startTime, LocalDateTime endTime) {
    return meetingRepository.findAll().stream()
            .filter(meeting -> "accepted".equals(meeting.getStatus()))
            .filter(meeting -> meeting.isPlaceConfirmedByBoth())
            .filter(meeting -> meeting.getMeetingTime() != null)
            .filter(meeting -> meeting.getMeetingTime().isAfter(startTime) && 
                               meeting.getMeetingTime().isBefore(endTime))
            .filter(meeting -> !meeting.isFeedbackSent())
            .collect(Collectors.toList());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏
   */
  @Scheduled(fixedRate = 300000) // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  public void checkAndSendFeedbackRequests() {
    LocalDateTime now = LocalDateTime.now();
    List<MeetingRequest> meetingsToCheck = findMeetingsForFeedback(now.minusHours(1), now);
    
    for (MeetingRequest meeting : meetingsToCheck) {
        sendFeedbackRequest(meeting);
        meeting.setFeedbackSent(true);
        meetingRepository.save(meeting);
    }
  }
}